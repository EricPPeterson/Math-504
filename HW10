##Math 504
##HW10

##problem 2
##part a
##function and derivative function
f <- function(x){
  return(exp(x))
}

df <- function(x){
  return(exp(x))
}

##calc value for test
df(0)

## solve numerically 
df.num <- function(x,h){
  out <- (exp(x + h) - exp(x - h))/(2*h)
  return(out)
}

## calc error
err <- function(x,h){
  out <- NULL
  while(h > 10e-16){
  val <- df.num(x,h) - df(0)
  num <- cbind(val,log(h),h)
  out <- rbind(out,num)
  cat(h,"\n")
  h <- h *.99
  }
  return(out)
}

mat <- err(0,1)
colnames(mat) <- c("error", "log h", "h")
plot(y = mat[,1], x = mat[,2], type = "l", main = "First Derivative Error", ylab = "error", xlab = "log h")
range(mat[,1])
##[1] -0.04249822  0.17520119
min(abs(mat[,1]))
##[1] 2.442491e-14
which(abs(mat[,1]) < 2.50e-14)
##[1] 1299
mat[1299,]
##error         log h             h 
##2.442491e-14 -1.304534e+01  2.160143e-06 


##part b
d2f <- function(x){
  return(exp(x))
}

d3f <- function(x){
  return(exp(x))
}

d4f <- function(x){
  return(exp(x))
}

d2f.num <- function(x,h){
  plus.taylor <- f(x) + (h*df(x)) + (h^2*d2f(x))/factorial(2) + (h^3*d3f(x))/factorial(3) + (h^4*d4f(x))/factorial(4)   
  minus.taylor <- f(x) - (h*df(x)) + (h^2*d2f(x))/factorial(2) - (h^3*d3f(x))/factorial(3) + (h^4*d4f(x))/factorial(4)
  out <- (plus.taylor - 2*f(x) + minus.taylor) / h^2
  return(out)
}

d2f.num(0,1)

## calc error
err.2 <- function(x,h){
  out <- NULL
  while(h > 10e-16){
    val <- d2f.num(x,h) - d2f(0)
    num <- cbind(val,log(h),h)
    out <- rbind(out,num)
    cat(h,"\n")
    h <- h *.99
  }
  return(out)
}

d2f.num(0,1)

mat2 <- err(0,1)
colnames(mat) <- c("error", "log h", "h")
plot(y = mat[,1], x = mat[,2], type = "l", main = "Second Derivative Error", ylab = "error", xlab = "log h")
range(mat2[,1])
##[1] -0.04249822  0.17520119
min(abs(mat2[,1]))
##[1] 2.442491e-14
which(abs(mat[,1]) < 2.50e-14)
##[1] 1299
mat[1299,]
##error         log h             h 
##2.442491e-14 -1.304534e+01  2.160143e-06 


##problem 3
##part c
H <- matrix(data = c(0,0,0,2,0,0,0,2,0,0,0,2,-2,-2,-2,0),nrow = 4)
ginv(H)
eigen(H)$values
##[1]   0.000000e+00+3.464102e+00i   0.000000e+00-3.464102e+00i -8.028028e-139+0.000000e+00i
##[4]   0.000000e+00+0.000000e+00i

##problem 4
x <- c(-1.71, 1.59, 1.82,-.763,-.763)

f <- function(x){
  return(exp(x[1]*x[2]*x[3]*x[4]*x[5])-.5*(x[1]^3+x[2]^3+1)^2)
}

g <- function(x){
  g.1 <- x %*% x - 10
  g.2 <- x[2] * x[3] - 5 * x[4] * x[5]
  g.3 <- x[1]^3 + x[2]^3 + 1
  return(c(g.1,g.2,g.3))
}

f(x);g(x)

df <- function(x){
  w <- exp(x[1]*x[2]*x[3]*x[4]*x[5])
  f.1 <- x[2]*x[3]*x[4]*x[5]*w - (3*x[1] * (x[1]^3 + x[2]^3 + 1))
  f.2 <- x[1]*x[3]*x[4]*x[5]*w - (3*x[2] * (x[1]^3 + x[2]^3 + 1))
  f.3 <- x[1]*x[2]*x[4]*x[5]*w
  f.4 <- x[1]*x[2]*x[3]*x[5]*w
  f.5 <- x[1]*x[2]*x[3]*x[4]*w
  return(c(f.1,f.2,f.3,f.4,f.5))
}

dg <- function(x){
  g.1 <- c(2*x[1],2*x[2],2*x[3],2*x[4],2*x[5])
  g.2 <- c(0,x[3],x[2],5*x[5],5*x[4])
  g.3 <- c(3*x[1]^2,3*x[2]^2,0,0,0)
  out <- cbind(g.1,g.2,g.3)
  return(out)
}

rand.val <- rnorm(10)
M <- matrix(data = c(dg(x),rand.val), nrow = 5)
QR <- qr(M)
Q <- qr.Q(QR)
span <- qr.Q(qr(dg(x)))


# lambda star
lambda.span <- df(x)%*%span
A <- t(span) %*% dg(x)   #grad_g=span_g%*%A
lambda.star <- solve(A)%*%t(lambda.span)

##check critical pt.
df(x) - dg(x)%*%lambda.star
## equals zero (close enough)

# Hessian for the Legrangian 
f <- function(x){
  return(exp(x[1]*x[2]*x[3]*x[4]*x[5])-.5*(x[1]^3+x[2]^3+1)^2)
}

g <- function(x){
  g.1 <- x %*% x - 10
  g.2 <- x[2] * x[3] - 5 * x[4] * x[5]
  g.3 <- x[1]^3 + x[2]^3 + 1
  return(c(g.1,g.2,g.3))
}

partial <- function(x,i,j){
  if (i==j){
    p <- prod(x[-i])^2*exp(prod(x))
  }
  else{
    p <- prod(x[c(-i,-j)])*exp(prod(x))+prod(x[-i])*prod(x[-j])*exp(prod(x))
  }
  return(p)
}

hessian_f <- function(x){
  h <- matrix(0,nrow=length(x),ncol=length(x))
  for (i in 1:length(x)){
    for (j in i:length(x)){
      if(i==1&j==1){
        h[i,j]= partial(x,1,1)-6*x[1]*(sum(x[1:2]^3)+1)-9*x[1]^4
      }
      if(i==1&j==2){
        h[i,j]= partial(x,1,2)-9*prod(x[1:2]^2)
      }
      if(i==2&j==2){
        h[i,j]= partial(x,2,2)-6*x[2]*(sum(x[1:2]^3)+1)-9*x[2]^4
      }
      else{
        h[i,j]=partial(x,i,j)
      }
      h[j,i]<-h[i,j]
    }
  }
  return(h)
}

hess.1 <- diag(2,nrow=5)

hess.2 <- matrix(c(rep(0,5),0,0,1,0,0,0,1,0,0,0,0,0,0,0,-5,0,0,0,-5,0),nrow=5)

hess.3 <- function(x){
  h <- matrix(c(6*x[1],0,0,0,0,0,6*x[2],rep(0,18)),nrow=5)
}

hess.lag <- function(x,lambda){
  mat <- matrix(0,nrow = 3,ncol = 3) 
  mat.2 <- -t(dg(x))
  mat.3 <-matrix(0,nrow = length(x),ncol = length(x))
  
  for(i in 1:length(x)){
    for (j in 1: length(x)){
      mat.3[i,j] <- hessian_f(x)[i,j] - sum(lambda*c(hess.1[i,j],hess.2[i,j],hess.3(x)[i,j]))
    }
  }
  
  h_one <- cbind(mat.3,t(mat.2))
  h_two <- cbind(mat.2,mat)
  hess.final <- rbind(h_one,h_two)
  return(hess.final)
}

eigen(hess.lag(x,lambda.star))$values
#saddle point

##part b
x0 <- c(-1.8,1.7,1.9,-0.8,-0.8)
x1 <- c(0,0,0,0,0)

L <- function(x,lambda){
  g <- c(df(x) - dg(x) %*% lam.start,g(x)) 
  return(g)
}


Newt <- function(x.start,lam.start,eps){
  parameter <- c(x.start,lam.start)
  
  while(sum(L(x.start,lam.start)^2) > eps){
    
    num <- parameter - solve(hess.lag(x.start,lam.start)) %*% L(x.start,lam.start)
    print(sum(L(x.start,lam.start)^2))
  }
  return(num)
}


lam.start <- rnorm(3,0,1)
run.1 <- Newt(x0,lam.start,0.1)
# for x0, the gradient quickly converged to a constant value  577.4126.

run.2 <- Newt(x1,lam.start,0.1)
# for x1, hassian matrix is not invertible.
