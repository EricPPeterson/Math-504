##Math 504
##HW 5
require(MASS)

## problem 2
## part a

p2HW5 <- read.delim("C:/Users/eric/Desktop/GTown Stats/math 504/HW1/p2b.csv")

##condition numbers
kappa.A <- kappa(p2HW5[,1:6]) ##356,598.769
kappa.ATA <- kappa(as.matrix(t(p2HW5[,1:6])) %*% as.matrix(p2HW5[,1:6]))  #20,863,828,336
norm.eq <- ginv(as.matrix(t(p2HW5[,1:6])) %*% as.matrix(p2HW5[,1:6])) %*% t(as.matrix(p2HW5[,1:6])) %*% as.matrix(p2HW5[,7])

## using solve
res <- matrix(data = NA, nrow = 1,ncol = 6)
M <- as.matrix(t(p2HW5[,1:6])) %*% as.matrix(p2HW5[,1:6])
y <- as.matrix(t(p2HW5[,1:6])) %*% as.matrix(p2HW5[,7], nrow = 6, ncol = 1)
solve(a = M, b = y, tol = 1e-30)


##part b
## finding qr, R, and Q matricies
qr.obj <- qr(as.matrix(p2HW5[,1:6]))
qr.q <- qr.Q(qr.obj)
kappa.q <- kappa(qr.q) ## 1.00000000000001
qr.r <- qr.R(qr.obj)
kappa.r <- kappa(qr.r) ## 356598.7696
beta.vec <- ginv(qr.r) %*% t(qr.q) %*% y

##part c
##using lm to find ans
pred <- colnames(p2HW5[c(1:6)])
resp <- colnames(p2HW5[c(7)])
lm.p2 <- lm(p2HW5[,resp] ~., p2HW5[,pred])

## part d
kappa.A   ##[1] 356598.7696041531
kappa.ATA ##[1] 208638283236.2043
kappa.R <- kappa(qr.r) ##[1] 356598.7696041531
kappa.Q <- kappa(qr.q) ##1.000000000000001

############################################
############################################
## question 3
##part a
attach(non_linear_1)
plot(y = y, x = x, type = "o", main = "Non-Linear Plot Problem 3")

##part b
b <- c(1,2,3,4,5,6,7,8)

##squared error function
NonLin <- function(beta){
  e <- function(i) {(y[i] - beta[1] * exp(-beta[2] * x[i]) + beta[3] * exp(-(x[i] - beta[4])^2/beta[5]^2) + beta[6] * exp((-x[i] - beta[7]^2)/beta[8]^2))^2
  }
  n <- nrow(non_linear_1)
  out <- sum(sapply(1:n,e))
  return(out)
}

grad.NL <- function(X,beta){
  
  #exponent functions
  ex.1 <- exp(-beta[2] * X)
  ex.2 <- exp(-(X - beta[4])^2/beta[5]^2)
  ex.3 <- exp((-X - beta[7]^2)/beta[8]^2)
  
  ##vector for gradient
  out <- matrix(data = NA, nrow = 8, ncol = 1)
  
  ## grad components
  out[1] <- ex.1 
  out[2] <- -beta[1] * x[i] * ex.1
  out[3] <- ex.2
  out[4] <- (2 * beta[3] * (X - beta[4])/beta[5]^2) * ex.2 
  out[5] <- 2 * beta[3] * exp(-(X - beta[4])^2/beta[5]^3) * ex.2
  out[6] <- ex.3
  out[7] <- (2 * beta[6] * (X - beta[7])/beta[8]^2) * ex.3
  out[8] <- 2 * beta[6] * exp(-(X - beta[7])^2/beta[8]^3) * ex.3
  
  return(out)
}

hess.NL <- function(X, beta){
  ##matrix for hessian values
  out <- matrix(data = 0, nrow = 8, ncol = 8)
 
  ##exponent functions
  ex.1 <- exp(-beta[2] * X)
  ex.2 <- exp(-(X - beta[4])^2/beta[5]^2)
  ex.3 <- exp((-X - beta[7]^2)/beta[8]^2)
  
  ## lots of zeroes in this matrix  
  ##rows
  dE.b1b2 <- -X * ex.1
  out[1,] <- c(0, dE.b1b2,0,0,0,0,0,0)
  dE.b2b2 <- beta[1] * X^2 * ex.1
  out[2,] <- c(dE.b1b2,dE.b2b2,0,0,0,0,0,0)
  dE.b3b4 <- ex.2 * (2/beta[5]^2) * (X - beta[4])
  dE.b3b5 <- ex.2 * (2 * (X - beta[4])^2/beta[3]^3)
  out[3,] <- c(0,0,0,dE.b3b4,dE.b3b5,0,0,0) 
  dE.b4b4 <- ex.2 * ((4 * beta[3] * (X - beta[4])^2 / (beta[5]^4)) - (2 * beta[3] * (X - beta[4]) / (beta[5]^2)))
  dE.b4b5 <- ex.2 * ((4 * beta[3] * (X - beta[4])^3 / (beta[5]^5)) - (4 * beta[3] * (X - beta[4])/(beta[5]^3)))
  out[4,] <- c(0,0,dE.b3b4,dE.b4b4,dE.b4b5,0,0,0)
  dE.b5b5 <- ex.2 * ((4 * beta[3] * (X - beta[4])^4 / (beta[5]^6)) - ((6 * beta[3] * (X - beta[4])^2 / (beta[5]^4))))
  out[5,] <- c(0,0,dE.b3b5,dE.b4b5,dE.b5b5,0,0,0)
  dE.b6b7 <- ex.3 * (2 * (X - beta[7]) / (beta[8]^2))
  dE.b6b8 <- ex.3 * (2 * (X - beta[7]) / (beta[8]^2)) * ((X - beta[7]) / beta[8])
  out[6,] <- c(0,0,0,0,0,0,dE.b6b7,dE.b6b8)
  dE.b7b7 <- ex.3 * ((4 * beta[6] * (X - beta[7])^2 / (beta[8]^4)) - (2 * beta[6] * (X - beta[7]) / (beta[8]^2)))
  dE.b7b8 <- ex.3 * ((4 * beta[6] * (X - beta[7])^3 / (beta[8]^5)) - (4 * beta[6] * (X - beta[7]) / (beta[8]^3)))
  out[7,] <- c(0,0,0,0,0,0,dE.b7b7,dE.b7b8)
  dE.b8b8 <- ex.3 * ((4 * beta[6] * (X - beta[7])^4 / (beta[8]^6)) - ((6 * beta[6] * (X - beta[7])^2 / (beta[8]^4))))
  out[8,] <- c(0,0,0,0,0,dE.b6b8,dE.b7b8,dE.b8b8)
  
  return(out)
}

hess.calc <- hess.NL(beta = b, X = 1)
