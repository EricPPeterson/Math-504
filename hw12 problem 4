##part i
require(lattice)
require(ggplot2)

myPCA <- function(D,n = 2){
  cov.eig <- eigen(cov(D))$values
  cov.vecs <- eigen(cov(D))$vectors
  sub.eig <- cov.eig[1:n]
  sub.vecs <- cov.vecs[,1:n]
  data <- as.matrix(D) %*% as.matrix(sub.vecs)
  return(list(vals = sub.eig, vecs = sub.vecs, points = data))
}

comps <- as.data.frame(myPCA(iris[,1:4], n = 2)$points)
plot(comps, col = ifelse(comps[,1] < 4, 'red', 'green'), pch = ifelse(comps[,1] < 4, 1,3),main = "Iris Data Plotted on 2 Principal Components", ylab = "Component 2", xlab = "Component 1")


##part ii
PCA.vals <- princomp(iris[,1:4])
two.pc <- as.matrix(PCA.vals$loadings[,1:2])
iris.mat <- as.matrix(iris[,1:4])
plot(iris.mat%*%two.pc, col = ifelse(comps[,1] < 4, 'blue', 'black'), pch = ifelse(comps[,1] < 4, 2,4),main = "Iris Data Plotted on 2 Principal Components", ylab = "Component 2", xlab = "Component 1")

plot(comps, col = ifelse(comps[,1] < 4, 'red', 'green'), pch = ifelse(comps[,1] < 4, 1,3),main = "Iris Data Plotted on 2 Principal Components", ylab = "Component 2", xlab = "Component 1")
points(iris.mat%*%two.pc, col = ifelse(comps[,1] < 4, 'blue', 'black'), pch = ifelse(comps[,1] < 4, 2,4))


##part c
## y = (b0 + b1x1 + b2x2 + b3x3 + b4x4)
x <- iris[,1:4]
y <- iris[,5]

## create initial hyperplane
hyper.plane <- function(beta, X){
  ## creates vectors to hold values
  over.under <- matrix(data = 1, nrow = nrow(X), ncol = 1)
  y <- matrix(data = NA, nrow = nrow(X), ncol = 1)
  n <- nrow(X)
  
  ## function to create y values
  for (i in 1:n){
    y[i,] <- (beta[1] * X[i,1]) + (beta[2] * X[i,2]) + (beta[3] * X[i,3]) + (beta[4] * X[i,4]) + beta[5]  
  }
  
  ## function to check/turn y value into one of two classes 
  for (j in 1:n){
    if (y[j,1] < 0) {over.under[j,1] = -1}
    
  }
  ##this should deal with anything that lands on the hyperplane by making it 
  ## only < 0. anything == 0 should be classified as one then, over the 
  ##hyperplane.
  
  return(list(total = y,class = over.under))
}

b <- rep(1,5)
values <- hyper.plane(beta = b, X = x)


##error function to maximize
e.func <- function(b){
  H <- hyper.plane(beta = b,X = x)
  vec <- H$class
  tots <- H$total
  E <- matrix(data = NA, nrow = length(Y), ncol = 1)
  n <- length(Y)
  Y <- iris[,5]
  
  for(j in 1:n){
    if(vec[j,1] == Y[j]) { E[j,1] = 0
    } else if(vec[j,1] != Y[j] & Y[j] == -1) {
      E[j,1] = -1 
    } else {
      E[j,1] = 1
    }
  }
  tot.err <- -sum(E * tots)
  return(tot.err)
}

b <- rep(1,5)
new.b <- nlm(e.func,b)$estimate
e.func(new.b)

##error function. counts total mis-counted points
##and total error.
e.funky <- function(vec, beta){
  E <- matrix(data = NA, nrow = length(Y), ncol = 1)
  n <- length(Y)
  H <- hyper.plane(beta, X = x)
  class <- H$class
  
  for(j in 1:n){
    if(vec[j] == class[j]) { E[j,1] = 0
    } else if(vec[j] != class[j] & class[j] == -1) {
      E[j,1] = -1 
    } else {
      E[j,1] = 1
    }
  }
  tot.err <- -sum(E * H$total)
  return(list(misclass = E, total.error = tot.err))
}

##test new model
values.model <- hyper.plane(beta = new.b, X = x)
err <- e.func(new.b)
err

err.2 <- e.funky(y,new.b)
table(err.2$misclass)
