##hw 6
##problem 2
##part b


n <- sample(1:100,2)
rowz <- max(n)
colz <- min(n)
vals <- sample(1:1000, rowz * colz, replace = T)
m <- matrix(data = vals, nrow = rowz, ncol = colz)

GramSchmidt <- function(mat, tol = 1e-12){
  
  #error checking
  stopifnot(is.numeric(mat), is.matrix(mat))
  
  m <- nrow(mat)
  n <- ncol(mat)
  if(m < n){stop ("Number of Rows must be greater than number of columns.")}
  
  ##run algo
  Q <- matrix(data = 0, nrow = m, ncol = n)
  R <- matrix(data = 0, nrow = n, ncol = n)
    
    for (k in 1:n){
    Q[,k] <- mat[,k]
    
    if (k > 1){
      for(i in 1:(k - 1)){  
        R[i,k] <- t(Q[,i]) %*% Q[,k]
        Q[, k] <- Q[, k] - R[i, k] * Q[, i]
      }    
    }
    R[k, k] <- norm(as.matrix(Q[, k]), type = "F")
    
    ##check for linear dependence. will return zero vector if dependence exists.
    if(R[k,k] < tol){stop("Check for linear dependence of vectors.")}
    
    Q[, k] <- Q[, k]/R[k, k]
  }
  return(list (Q = Q, R = R))
}

m.orth <- GramSchmidt(m)

########################################################################
########################################################################

##problem 3
##part a
pima <- read.csv("C:/Users/eric/Desktop/GTown Stats/math 504/HW6/pima.csv")
attach(pima)
x <- pima[,1:8]
y <- pima[,9]

## y = (b0 + b1x1 + b2x2 + b3x3 + b4x4 + b5x5 + b6x6 + b7x7 + b8x8)
## create initial hyperplane
hyper.plane <- function(beta, X){
  ## creates vectors to hold values
  over.under <- matrix(data = 1, nrow = nrow(X), ncol = 1)
  y <- matrix(data = NA, nrow = nrow(X), ncol = 1)
  n <- nrow(X)
  
  ## function to create y values
  for (i in 1:n){
  y[i,] <- (beta[1,1] * X[i,1]) + (beta[1,2] * X[i,2]) + (beta[1,3] * X[i,3]) + (beta[1,4] * X[i,4]) + (beta[1,5] * X[i,5]) + (beta[1,6] * X[i,6]) + (beta[1,7] * X[i,7]) + (beta[1,8] * X[i,8]) + beta[1,9]  
  }
  
  ## function to check/turn y value into one of two classes 
  for (j in 1:n){
  if (y[j,1] < 0) {over.under[j,1] = -1}
  
  }
  ##this should deal with anything that lands on the hyperplane by making it 
  ## only < 0. anything == 0 should be classified as one then, over the 
  ##hyperplane.
  
  return(list(total = y,class = over.under))
}

b <- as.matrix(t(c(rep(1,9))))
values <- hyper.plane(beta = b, X = x)

##error function. counts total mis-counted points
##and total error.
e.func <- function(vec, Y){
  E <- matrix(data = NA, nrow = length(Y), ncol = 1)
  n <- length(Y)
  
  for(j in 1:n){
    if(vec[j,1] == Y[j]) { E[j,1] = 0
    } else if(vec[j,1] != Y[j] & Y[j] == -1) {
      E[j,1] = -1 
    } else {
      E[j,1] = 1
    }
  }
  H <- hyper.plane(beta = b,X = x)
  tot.err <- -sum(E * H$total)
  return(list(misclass = E, total.error = tot.err))
}

err <- e.func(values$class,y)

##F(b) = sum_false(y.i)(b0 + b1x1 + b2x2 + b3x3 + b4x4 + b5x5 + b6x6 + b7x7 + b8x8)
grad.F <- function(mat, resp, e){
  grad.vec <- matrix(data = NA, nrow = ncol(mat)+1, ncol = 1)  
  
  m <- resp

  for (i in 1:(ncol(mat)+1)){
    if (i == 1){n <- rep(1,nrow(mat))}
    if (i > 1){
      n <- mat[,(i-1)]
    } 
    grad.vec[i,1] <- -sum(m * n * e)
  }
  return(grad.vec)
}

dB <- grad.F(mat = x, resp = y, e = err$miscalc)

##part b
steep.D <- function(beta, resp, preds){
  beta.matrix <- matrix(data = NA, nrow = 1e5, ncol = 10)
  gX <- 1
  b <- beta
  x <- preds
  y <- resp
  iter <- 1
  
  while(iter < 1e2){
  ## initial values
  alpha <- 1
  J <- hyper.plane(beta = b,X = x)
  E <- e.func(J$class,y)$total.error 
  dB <- grad.F(mat = x, resp = y, e = E)
  gX <- sqrt(sum(dB^2))
  pX <- -dB/gX
  
  ## set new point
  new.b <- b + alpha * t(pX)
  J.new <- hyper.plane(beta = new.b, X = x)
  new.E <- e.func(J.new$class,y)$total.error 
  
  while(new.E > E){
    alpha <- alpha/2
    new.b <- b + alpha * pX
    J.new <- hyper.plane(beta = new.b, X = x)
    new.E <- e.func(J.new$class,y)
  }
  
  if(new.E < 0){
    return(beta.matrix)}
  
  b <- new.b
  E <- new.E
  alpha <- 1
  beta.matrix[iter,] <- cbind(matrix(b,ncol = 9),E)
  cat(E, gX, iter, "\n")
  iter <- iter + 1
  }
  return(beta.matrix)
}

##initial values
b <- as.matrix(t(c(rep(10,9))))

##run function
pima.matrix <- steep.D(beta = b, resp = y, preds = x)
pima.matrix <- data.frame(pima.matrix[complete.cases(pima.matrix),])
colnames(pima.matrix) <- c("beta1","beta2","beta3","beta4","beta5","beta6","beta7","beta8","beta0","total.error")

##test new model
b.model <- as.matrix(tail(pima.matrix,n = 1L)[,1:9])
values.model <- hyper.plane(beta = b.model, X = x)
err <- e.func(values.model$class,y)
table(err$misclass)
err$total.error

##rerun the model with new betas to try and improve performance
b <- b.model

##starting point all 10's#################################
##-1   0   1 
##128 510 129 
##err$total.error
##[1] 38655.43
##########################################################
##betas
##b.model#################################################################
## beta1    beta2     beta3     beta4    beta5     beta6      beta7    beta8
## 9.58396 9.380443 -20.68969 -17.08941 3.046192 -3.518592 -0.2722207 9.879298
##beta0
##-0.1542527
##########################################################################


##part c
# to get a unit vector orthogonal to the hyperplane, we'll create tangent to our plane with a matrix
# that captures the differences of between all of our betas, this defines the space to which we want to
# find the normal vector

# we will not consider beta[1] which is our betaZero, as this is just a scaler, aka the intercept

# to get the vector orthagonal to the plane, 

beta <- b

# create our matrix that is 7 by 8, where each aij is beta[i] - beta[j]
A <- matrix( c(NA), nrow = 7, ncol = 8)

for(i in 1:7) {
  for(j in 1:8){ 
    A[i,j] <- beta[i] - beta[j]
  }
}

A <- t(A)

# But we should transpose this, so we have 7 vectors with 8 components each

A <- t(A)

# Now that we have our matrix representing the space of the betas, the vector orthogonal to this is
# the nullspace of this matrix:
require("MASS")
Z <- Null(A)
Q <- GramSchmidt(A)$Q
