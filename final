##final
##problem 1
##part b
require(boot)

arg.1 <- c(25,20)
ST.1 <- c(20,12)
ST.2 <- c(1,1)
arg.2 <- rbind(ST.1,ST.2)
RT.1 <- rbind(1800,120)
ST.3 <- c(1,0)
ST.4 <- c(1,0)
arg.3 <- rbind(ST.3,ST.4)
RT.2 <- rbind(0,0)

X <- simplex(a = arg.1, A1 = arg.2, b1 = RT.1, A2 = arg.3, b2 = RT.2, maxi = T)

# Plotting the feasible set with contour lines
plot(0,0,xlim=c(0,200), ylim=c(0,200), type='n', xlab="B", ylab="C",
     main="The feasible set with contour lines for the objective")
abline(a=120, b=-1, lty=2, col='blue')
abline(a=150, b=-150/90, lty=2, col='blue')
abline(h=0, lty=2, col='blue')
abline(v=0, lty=2, col='blue')

extr_x = c(0,90,45,0)
extr_y = c(0, 0, 75, 120)
polygon(extr_x, extr_y, col="orange", border='blue')
points(extr_x, extr_y)

f=function(b,c){25*b+20*c}
contour(0:200, 0:200, outer(0:200, 0:200, FUN=f), add=T, nlevels=5)


##problem 2
##part a
require(quadprog)
##download data
iris <- read.csv("C:/Users/eric/Desktop/GTown Stats/math 504/HW12/iris.txt", header=F)
y <- matrix(iris[,5])
x <- t(iris[,1:4])

##create vectors for b0 and betas
b0 <- matrix(data = 1, nrow = 1, ncol = 100)
b <- matrix(data = 1,nrow = 1, ncol = 5)

##create Dmat and dvec. 
##Dmat is b0^2 + b1^2 + b2^2 + b3^2 + b4^2 + b5^2
##dvec is zeroes.  minimize the function.
Dmat <- diag(5)
dvec <- matrix(rep(0,5),5,1)

## combine vector of ones (b0) with x attributes
vec.1 <- rep(1,nrow(y)) 
Amat <- cbind(vec.1,iris[,1:5])

##multiply each row by y's to complete the constraint
for(j in 1:nrow(Amat)){
  Amat[j,] <- y[j,] * Amat[j,]  
}
bvec <- matrix(data = 1, nrow = 1, ncol = 100)
meq <- 0

##run the solve.QP
ans <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = t(Amat[,1:5]), bvec = bvec, meq = 0)
sol <- ans$solution[-1]


##create the matrix to project
n <- length(sol)
rob_basis <- matrix(rnorm(n^2), nrow = n, ncol = n)
rob_basis[,1] <- sol
Q <- qr.Q(qr(rob_basis))

# hyperplane span
# basis = Q[,2:4] 

projection <- Q[,1:2]
proj <- t(x) %*% projection
plot(proj, pch = ifelse(proj[,1] < 0,1,3), col = ifelse(proj[,1] < 0, "blue", "red"), main = "Projected Basis", ylab = "2nd dimension", xlab = "1st dimension") 


##problem 3
set.seed(100)
data(phoneme)
table(phoneme[,257])

##create random samples to break into test and training
x <- sample(1:5,nrow(phoneme),replace = TRUE)
phoneme <- cbind(phoneme, x)
train <- which(phoneme[,259] != 5)
test <- which(phoneme[,259] == 5)
phone.train <- phoneme[train,]
phone.test <- phoneme[test,]

##further break training test into indvidual sounds
train.aa <- which(phone.train[,257] == "aa")
train.aa <- phone.train[train.aa,]

train.ao <- which(phone.train[,257] == "ao")
train.ao <- phone.train[train.ao,]

train.dcl <- which(phone.train[,257] == "dcl")
train.dcl <- phone.train[train.dcl,]

train.iy <- which(phone.train[,257] == "iy")
train.iy <- phone.train[train.iy,]

train.sh <- which(phone.train[,257] == "sh")
train.sh <- phone.train[train.sh,]

